###########################################################################
■背景
・プログラミングを楽しめる言語という宣伝に惹かれて
・Web系の開発に触れたことないので、何か１種類学びたいと思った
・組込み系やモバイルアプリでもWebサーバとの通信が必要な場合もあるので、
　学ぶことに損はないと思う。

■特徴

■使用例
###########################################################################


--------------------------------------------------------------------------------------------------------------------------------
■2021/03/15
[memo]
・文字と文字列の違いはない
　→１文字だけの文字列を生成はできるが、ほぼ使わない
・Ruby2.4から整数は全てIntegerクラス
・Rubyではif文以外のとこでも意図的に &&, || を使う場合がある

[疑問点]
・有理数、無理数とは？
　有理数：二つの整数、例えばa,bを用いて、a/bの分数で表せる数のこと
　無理数：逆に分数で表せない数のこと

・複素数とは？
　複素数：実数と虚数を組み合わせたもの
　　　　　――――――――――――――
　　　　　例）
　　　　　　１、３、７・・・実数
　　　　　　i、5i、-4i・・・虚数
　　　　　　3 - I、-7+ 5i・・・複素数
　　　　　――――――――――――――
　虚数：２乗したら０未満の実数になる数。(現実には存在しない)


--------------------------------------------------------------------------------------------------------------------------------
■2021/03/17

【メソッド定義】
・Rubyにはデフォルト値付のメソッドの定義が可能
・デフォルト値は固定値だけでなく、動的に変わる値や他のメソッドの戻り値を指定したりすることもできる


--------------------------------------------------------------------------------------------------------------------------------
■2021/03/18

【?や!で終わるメソッド】
・？は真偽値を返すメソッド
・？で終わるメソッドは自分で定義することもできる
  ====================================================
  #空文字であるかの判定
  irb(main):001:0> ''.empty?
  => true
  irb(main):003:0> "".empty?
  => true

  #該当の文字列が含まれてるかの判定
  irb(main):004:0> 'abc'.empty?
  => false
  irb(main):005:0> 'watch'.include?('ab')
  => false
  irb(main):006:0> 'watch'.include?('at')
  => true

  #奇数・偶数判定(偶数ならtrue)
  irb(main):007:0> 1.even?
  => false
  irb(main):008:0> 2.even?
  => true

  #オブジェクトのnil判定
  irb(main):009:0> nil.nil?
  => true
  irb(main):011:0> 'abc'.nil?
  => false
  irb(main):013:0> 1.nil?
  => false
  ====================================================

・！で終わるメソッドは慣習として「使用する際は注意が必要」という意味を持つ
・？と同じく自分で定義することも可能
  ====================================================
  irb(main):002:0> a = 'ruby'
  => "ruby"

  #upcaseメソッド(小文字を大文字に変換)
  #！がなければ変数の値は大文字に変わらない
  irb(main):003:0> a.upcase
  => "RUBY"
  irb(main):004:0> a
  => "ruby"

  #！があれば変数の値も大文字に変換される
  #このように呼び出したオブジェクトの状態を変更するメソッドを「破壊的メソッド」と呼ぶ
  irb(main):005:0> a.upcase!
  => "RUBY"
  irb(main):006:0> a
  => "RUBY"
  ====================================================
・破壊的メソッドが全て！で終わる訳でもなく、破壊的メソッドでないメソッドに！をつけることもある
・！がついてる場合は何かしら注意事項がある
　→注意事項については、APIドキュメントを参照
・メソッドには「！」や「？」を使用できるが、変数には使用できない


【その他の基礎知識】
⭐️ガベージコレクション(GC)
　Rubyはメモリを自動的に開放する。メモリ管理の意識は不要。
　この仕組みをガベージコレクション(GC)という。
⭐️エイリアスメソッド
  異なる実装で同じ処理を行うメソッド。
  ====================================================
  irb(main):001:0> 'hello'.length
  => 5
  irb(main):002:0> 'hello'.size
  => 5
  ====================================================


--------------------------------------------------------------------------------------------------------------------------------
■2021/03/19
【組込みライブラリ・標準ライブラリ・gem】
・StringクラスやIntegerクラスは組込みライブラリ
・Dateクラスは標準ライブラリ
・gemは外部ライブラリ

