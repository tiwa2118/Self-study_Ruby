
--------------------------------------------------------------------------------------------------------------------------------
■2021/03/27(sat)
【Rubyの配列】
・Rubyの配列はArrayクラスのオブジェクト
・数値と文字列交互に格納することも可能
  ####
  [1,'A',2,'B',3,'C']
・配列の中に配列を格納することも可能
  ####
  [[1,'A',2],['B',3,'C']]
  →１つの値を参照する場合は２次元配列で指定
   a[0][1]
   => "A"

・値の途中の追加も可能
・追加した要素が元のmaxよりも大きいと間の値はnilで埋められる
  ####
  irb(main):021:0> a = [1,2,3]
  => [1, 2, 3]
  irb(main):022:0> a
  => [1, 2, 3]
  irb(main):023:0> a[2]
  => 3
  irb(main):024:0> a[5] = 50
  => 50
  irb(main):025:0> a
  => [1, 2, 3, nil, nil, 50]
・「<<」を使用すると、配列お最後に要素を追加することが出来る

・配列内の特定の位置にある要素を削除したい場合は、delete_atを使う
  ####
  #2番目の要素を削除
  a.delete_at(1)

・divmod：商と余りを配列で返す
  ####
  14 / 3の商と余りを配列返す
  irb(main):035:0> 14.divmod(3)
  => [4, 2]


【ループ】
・ほとんどのRubyプログラマはfor文を使わない
・配列自身にループ命令を出す書き方が主流
  ####
  numbers = [1,2,3,4]
  sum = 0
  numbers.each do |n|
    sum += n
  end

・配列のdeleteメソッドは特定の値しか削除できない
・配列要素の中から条件に合致する値を削除したい場合は、
　delete_ifメソッドを使う。

  ###
  配列の中か”2”を削除
  irb(main):001:0> a = [1,2,3,4,5]
  => [1, 2, 3, 4, 5]
  irb(main):002:0> a.delete(2)
  => 2

  配列の中から特定の奇数を削除
  irb(main):003:0> a
  => [1, 3, 4, 5]
  irb(main):004:0> a.delete_if do |n|
  irb(main):005:1*  n.odd?
  irb(main):006:1> end
  => [4]
  残りは”4”のみ
  irb(main):007:0> a
  => [4]

  odd?メソッドは数値が奇数の時にtrueを返す


--------------------------------------------------------------------------------------------------------------------------------
■2021/03/28(sun)
【ブロックとブロック引数】
・ブロック引数にブロックの外に定義している変数と同じ変数名にすることは可能だが、
　読み手を混乱させてしまうので、なるべく使わないようにする。

  ####
  numbers = [1,2,3,4]
  sum = 0
  sum_value = 100

　#ブロック引数にブロックの外に定義しているsum_valueと同じ名前にしているが、
　　ブロック内ではブロック引数の値が有線される
  numbers.each do |sum_value|
    sum += sum_value
    puts "sum:#{sum}"
  end


【do...endと｛}】
・改行で長いブロックを書く場合はdo...end
・１行でコンパクトに書きたい場合は{}で書くことが多い


【map/collect】
・mapメソッドはブロック内の戻り値をそのまま変数に詰め込むことが出来る
・collectはmapのエイリアスメソッド

  ####
  irb(main):001:0> num = [1,2,3]
  => [1, 2, 3]
  irb(main):002:0> nwe_num = []
  => []
  irb(main):003:0> new_num = num.map { |n| n*10 }
  => [10, 20, 30]
  irb(main):004:0> new_num
  => [10, 20, 30]


【select/find_all/reject】
・selectは配列の要素内で条件に合致する値だけを抜き出したい場合に使える
・find_allはselectのエイリアスメソッド
  ####
  irb(main):007:0> num = [1,2,3,4,5,6]
  => [1, 2, 3, 4, 5, 6]
  # 条件に合致した値だけを変数even_numに格納
  # ↓の例では偶数のみを抽出
  irb(main):008:0> even_num = num.select{ |n| n.even? }
  => [2, 4, 6]
  # even_numに偶数のみ格納されている
  irb(main):009:0> even_num
  => [2, 4, 6]

・rejectは反対にブロック内の戻り値が真となる要素を「除外」する
  ####
  #偶数を除外し奇数のみが格納される
  irb(main):010:0> even_num = num.reject{ |n| n.even? }
  => [1, 3, 5]
  irb(main):011:0> even_num
  => [1, 3, 5]


【find/detect】
・findメソッドはブロックの戻り値が真になった最初の要素を返す
・detectはエイリアスメソッド
  ####
  最初に見つかった
  irb(main):014:0> num
  => [1, 2, 3, 4, 5, 6]
  irb(main):015:0> even_num = num.find{ |n| n.even? }
  => 2


  --------------------------------------------------------------------------------------------------------------------------------
  ■2021/03/31(wed)
  【inject/reduce】
  ・畳み込み演算を行うメソッド
  ・エイリアスメソッドはreduce

    ####
    [eachメソッドを使った場合]
    irb(main):001:0> numbers = [1,2,3,4,5]
    => [1, 2, 3, 4, 5]
    irb(main):002:0> sum = 0
    => 0

    1〜５の値を変数sumに加算していく
    irb(main):003:0> numbers.each {|n| sum += n}
    => [1, 2, 3, 4, 5]
    irb(main):004:0> sum
    => 15

    [injectメソッドを使った場合]
    irb(main):005:0> numbers
    => [1, 2, 3, 4, 5]
    irb(main):006:0> sum = numbers.inject(0) {|result, n| result + n}
    => 15


--------------------------------------------------------------------------------------------------------------------------------
■2021/04/03(sat)
【Range（範囲）】
・「..」と「...」の違いは最後の値を含むか、含まないか

  ####
  irb(main):012:0> range = 1...5
  => 1...5
  irb(main):013:0> range.include?(5)
  => false
  irb(main):014:0> range.include?(4.9)
  => true

  irb(main):001:0> (1..5).class
  => Range
  irb(main):002:0> range = 1..5
  => 1..5
  irb(main):010:0> range.include?(5)
  => true
  irb(main):011:0> range.include?(6)
  => false
